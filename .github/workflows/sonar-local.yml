name: Build
on:
  push:
    branches:
      - develop # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2
          with:
            - fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: node client.js
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # O nome do host usado para comunicar-se com o contêiner de serviço do PostgreSQL
          POSTGRES_HOST: postgres
          # A porta-padrão do PostgreSQL
          POSTGRES_PORT: 5432

      - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 11

      - name: Cache SonarQube packages
          uses: actions/cache@v1
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
            - name: Cache Maven packages
              uses: actions/cache@v1
              with:
                path: ~/.m2
                key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                restore-keys: ${{ runner.os }}-m2
            - name: Build and analyze
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
              run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=pokemon-tcg

